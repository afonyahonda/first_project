'--------Функция def------'

#Ключевое слово Python def используется для определения функции, 
#оно помещается перед именем функции, которое предоставляется пользователем
#для создания определяемой пользователем функции. В Python функция - это логическая единица кода, 
#содержащая последовательность операторов с отступом под именем, 
#заданным с использованием ключевого слова “def”.  В Python ключевое слово def 
#является наиболее используемым ключевым словом.

'Создайте функцию def для нахождения разности двух чисел'
# def python_def_subNumbers(x,y):
#     return(x-y)
# a = int(input('Введите число:'))
# b = int(input('Введите число:'))
# result = python_def_subNumbers(a,b)
# print('Разность чисел', a , 'и', b, 'это',result)

#без DEF
# a = int(input('Введите число:'))
# b = int(input('Введите число:'))
# sum = a-b
# print('Разность чисел', a ,'и', b, 'это',sum)

'------------ПРИМЕР С МЕДОМ--------'
"""
Простой пример: Вы торгуете мёдом, и после каждой продажи вам нужно печатать чек.
В нём должно быть указано: название фирмы, дата продажи, список наименований проданных товаров, 
их количество, цены, общая сумма, а также сакраментальная фраза "Спасибо за покупку!".
Если не пользоваться функциями, всё придётся прописывать вручную.
В простейшем случае программа будет выглядеть так:
"""
# print("Магазин Медовый Барон")
# print("Липовый мёд", end=" ")
# print(1, end="шт ")
# print(1250, end="р")
# print("\nCумма", 1250, end="р")
# print("\nСпасибо за покупку!")
"""
A теперь представьте, что произойдёт, когда вы раскрутитесь, и покупатели станут приходить один за другим.
B таком случае, чеки надо будет выдавать очень быстро. Ho что делать, если вдруг нагрянет ваш любимый
клиент и купит 10 сортов мёда в разных количествах? Далеко не все в очереди согласятся ждать, 
пока вы посчитаете общую сумму и внесёте её в чек.
Хорошо, что данный процесс можно легко оптимизировать c использованием функций.
"""
def print_check(honey_positions):
    sum = 0  # переменная для накопления общей суммы
    print("Магазин Медовый Барон/n") # в цикле будем выводить название, количество и цену
    for honey in honey_positions:
        name = honey[0]
        amount = honey[1]
        price = honey[2]
        print(f"{name} ({amount}шт.)-{price} руб/шт. {amount*price} руб")
        sum += amount * price  # здесь же будем считать ещё и общую сумму
    print(f"\nИтогo: {sum} руб.")
    print("Спасибо за покупку!")

"""
Встаёт резонный вопрос: где же обещанное упрощение и куда подевались товары? 
Как раз для этого, мы и будем описывать состав покупки не напрямую в функции, a в отдельном списке кортежей.
Каждый кортеж состоит из трёх элементов: название товара, количество и цена.
"""
honey_positions = [
    ("Липовый мёд", 3, 1250),
    ("Цветочный мёд", 7, 1000),
    ("Гречишный мёд", 5, 1300),
    ("Донниковый мёд", 1, 1750),
    ("Малиновый мёд", 10, 2000),
]
"""
Теперь этот список передадим в функцию как аргумент, и самостоятельно считать больше не придётся.
"""
print_check(honey_positions)